/**
 *
 * @author CemAlpOzer
*/

// Made in NetBeans IDE
import java.io.File;
import javax.swing.JFileChooser;
public class MyGUI extends javax.swing.JFrame {
    // To get File from the user.
    private File selectedFile;
    /**
     * Creates new form MyGUI
     */
    public MyGUI() {
        initComponents();
        jTextArea2.setText("Select your CSV file");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cities"));
        jPanel1.setOpaque(false);

        jLabel1.setText("Starting City");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Destination");

        jButton1.setText("ENTER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Select File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addComponent(jTextField1)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2});

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Check if a file is selected
        if (selectedFile == null) {
            jTextArea2.setText("Please choose a valid CSV file first.");
            return;
        }
        
        // Read the city names from the text fields
        String startCity = jTextField1.getText().trim();
        String endCity = jTextField2.getText().trim();

        // Loading the cities and distances from the selected file
        String[] cities = CreateArray.getHeaderFromCsv(selectedFile);
        int[][] distances = CreateArray.getDistancesFromCsv(selectedFile);
        
        // Check if the data is loaded successfully
        if (cities == null || distances == null ) {
            jTextArea1.setText("Error loading data from the selected file.");
            return;
        }

        // Find indexes for start and end cities
        int startIndex = -1;
        int endIndex = -1;

        // Find the indexes of the start and end cities
        // O(n) Time Complexity due to the for loop
        for (int i = 0; i < cities.length; i++) {
            if (cities[i].equalsIgnoreCase(startCity)) {
                startIndex = i;
            }
            if (cities[i].equalsIgnoreCase(endCity)) {
                endIndex = i;
            }
        }

        // Check if the city names are valid
        if (startIndex == -1 || endIndex == -1) {
            jTextArea1.setText("Invalid city names. Please check and try again.");
            return;
        }

        /* BFS Shortest Path algorithm */
        BFS bfs = new BFS(distances, cities);

        // Calculating the time for BFS
        long startTimeBFS = System.nanoTime();
        bfs.shortestPathBFS(startIndex, endIndex);
        long endTimeBFS = System.nanoTime();
        
        // Getting the shortest path and distance from BFS
        String bfsPath = bfs.path;
        int bfsDistance = bfs.getShortestDistance();

        /* DFS Shortest Path algorithm */
        DFS.shortestPath = null;
        DFS.shortestDistance = Integer.MAX_VALUE;
        
        // Calculating the time for DFS
        long startTimeDFS = System.nanoTime();
        DFS.shortestPathDFS(startIndex, endIndex, cities, distances);
        long endTimeDFS = System.nanoTime();

        // Getting the shortest path and distance from DFS
        String dfsPath = DFS.shortestPath;
        int dfsDistance = DFS.shortestDistance;

        // For displaying the results
        StringBuilder result = new StringBuilder();

        // Display the results from BFS
        result.append("BFS Shortest Path:\n");
        if (bfsPath != null) {
            result.append(bfsPath);
            result.append("\nDistance: ");
            result.append(bfsDistance).append("\n");
            result.append("BFS execution time: ").append((endTimeBFS - startTimeBFS) / 1_000_000.0);
            result.append(" milliseconds").append("\n\n");
        } else {
            result.append("No path found using BFS.\n\n");
        }

        // Display the results from DFS
        result.append("DFS Shortest Path:\n");
        if (dfsPath != null) {
            result.append(dfsPath);
            result.append("\nDistance: ");
            result.append(dfsDistance).append("\n");
            result.append("DFS execution time: ").append((endTimeDFS - startTimeDFS) / 1_000_000.0);
            result.append(" milliseconds");
        } else {
        result.append("No path found using DFS.");
        }

        // Display results in the text area
        jTextArea1.setText(result.toString());
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Creating a new fileChooser instance
        JFileChooser fileChooser = new JFileChooser();
        
        // Setting the title and file selection mode
        fileChooser.setDialogTitle("Select a CSV File");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); // Making CSV files selectable

        // Setting the file filter
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV Files", "csv"));

        // Showing the file chooser dialog
        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();

            // Displaying the selected file path
            loadCityNamesFromFile(selectedFile);
        }
    }                                        
    
    // Void Method for loading city names from the selected file
    private void loadCityNamesFromFile(File filePath) {
        // Getting the city names from the selected file
        String[] cities = CreateArray.getHeaderFromCsv(filePath);

        if (cities != null && cities.length > 0) {
            // Joining the city names with line breaks for readability
            String cityList = String.join(", ", cities);
            jTextArea2.setText(cityList);
        } else {
            jTextArea2.setText("No cities found in the file.");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration                   
}